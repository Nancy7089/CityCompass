import { useState, useEffect } from 'react';
import { generateIntelligentTitle } from '../utils/chatTitleGenerator';

export const useRecentChats = () => {
  const [recentChats, setRecentChats] = useState([]);

  // Load recent chats from localStorage on component mount
  useEffect(() => {
    const savedChats = localStorage.getItem('urbanai_recent_chats');
    if (savedChats) {
      try {
        const parsedChats = JSON.parse(savedChats);
        setRecentChats(parsedChats);
      } catch (error) {
        console.error('Error loading recent chats:', error);
        setRecentChats([]);
      }
    }
  }, []);

  const createNewChat = () => {
    const newChatId = `chat_${Date.now()}`;
    const newChat = {
      id: newChatId,
      title: "New Chat",
      timestamp: new Date().toISOString(),
      lastMessage: null,
      messageCount: 0,
      messages: [] // ✅ Add messages array for chat history
    };

    const updatedChats = [newChat, ...recentChats.slice(0, 9)];
    setRecentChats(updatedChats);
    
    localStorage.setItem('urbanai_recent_chats', JSON.stringify(updatedChats));
    
    console.log('New chat created:', newChatId);
    return newChatId; // ✅ Return the ID for parent component
  };

  // ✅ ENHANCED: Support both AI-generated and fallback titles
  const updateChatTitle = (chatId, titleOrMessage, isAIGenerated = false) => {
    const updatedChats = recentChats.map(chat => {
      if (chat.id === chatId) {
        let newTitle;
        
        if (isAIGenerated) {
          // Title is already generated by AI response analysis
          newTitle = titleOrMessage;
        } else {
          // Fallback: Generate title from user message
          newTitle = generateIntelligentTitle(titleOrMessage);
        }
        
        return {
          ...chat,
          title: newTitle,
          lastMessage: isAIGenerated ? null : titleOrMessage, // Don't overwrite lastMessage if it's an AI-generated title
          messageCount: isAIGenerated ? chat.messageCount : chat.messageCount + 1,
          timestamp: new Date().toISOString()
        };
      }
      return chat;
    });

    setRecentChats(updatedChats);
    localStorage.setItem('urbanai_recent_chats', JSON.stringify(updatedChats));
    
    console.log(`Chat title updated to: "${isAIGenerated ? titleOrMessage : generateIntelligentTitle(titleOrMessage)}" ${isAIGenerated ? '(AI-generated)' : '(fallback)'}`);
  };

  // ✅ NEW: Add message to chat history
  const addMessageToChat = (chatId, message, sender = 'user') => {
    const updatedChats = recentChats.map(chat => {
      if (chat.id === chatId) {
        const newMessage = {
          id: Date.now(),
          type: 'text',
          message: message,
          sender: sender,
          timestamp: new Date().toISOString()
        };

        return {
          ...chat,
          messages: [...(chat.messages || []), newMessage],
          lastMessage: message,
          messageCount: chat.messageCount + 1,
          timestamp: new Date().toISOString()
        };
      }
      return chat;
    });

    setRecentChats(updatedChats);
    localStorage.setItem('urbanai_recent_chats', JSON.stringify(updatedChats));
  };

  // ✅ NEW: Get specific chat by ID
  const getChatById = (chatId) => {
    return recentChats.find(chat => chat.id === chatId) || null;
  };

  // ✅ NEW: Delete chat
  const deleteChat = (chatId) => {
    const updatedChats = recentChats.filter(chat => chat.id !== chatId);
    setRecentChats(updatedChats);
    localStorage.setItem('urbanai_recent_chats', JSON.stringify(updatedChats));
  };

  return {
    recentChats,
    createNewChat,
    updateChatTitle,
    addMessageToChat, // ✅ NEW
    getChatById,      // ✅ NEW
    deleteChat        // ✅ NEW
  };
};
